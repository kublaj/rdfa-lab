
/* TODO:
- add full reset+html5 css prelude?
*/

head {
    background-color: #eee;
    border-bottom: 1px inset #aaa;
    display: block;
    padding-bottom: 0.5em;
}
head > style, head > script {
    display: none;
}

body {
  background-color: #fff;
  color: #bbb;
  font-family: sans-serif;
  font-size: 80%;
  margin: auto;
  width: 80%;
  max-width: 64em;
}

a {
  color: #bbb;
  text-decoration: none;
}

img, canvas {
   opacity: 0.3;
}

link, meta {
    outline-style: dotted !important;
}

/* TODO: before(2) hardly supported; extend all(!) combos with vocab? E.g.:
[resource][typeof][vocab]:before {
    content: "<" attr(resource) "> a " attr(typeof) " @vocab <" attr(vocab) ">";
}
*/
[vocab]:before,
[vocab]:before(2) {
    color: orange;
    content: "@vocab <" attr(vocab) ">\a";
    font-size: 10px;
}
[prefix]:before {
    color: orange;
    content: "@prefix " attr(prefix);
    font-size: 10px;
    white-space: pre;
}

[property]:not([href]):not([resource]):not([typeof]):before {
    background-color: #ffe;
    color: #e30;
    content: attr(property);
    font-size: 10px;
    font-weight: bold;
    padding: 0 2px;
    position: relative; top: -1em;
}
[property]:not([href]):not([resource]):not([typeof])[content]:before {
    content: attr(property) " \"" attr(content) "\"";
}
meta[property]:not([href]):not([resource]):not([typeof])[content]:before {
    content: attr(property) " \"" attr(content) "\"";
    position: static;
}
meta[property],
[property]:not([href]):not([resource]):not([typeof]):not([content]) {
    display: inline-block;
    margin-top: 0.7em;
    outline: 1px solid #ffa;
    background-color: #ffe;
}
meta[property] {
    margin: 0;
}
[property]:not([href]):not([resource]):not([typeof]):not([content]),
[property]:not([href]):not([resource]):not([typeof]):not([content]) * {
    color: #a43;
}

[typeof]:before {
    background-color: #fff;
    color: purple;
    content: "a " attr(typeof);
    font-size: 11px;
    font-weight: bold;
    padding: 0 2px;
    position: relative; top: -1.5em;
}
[about],
[typeof] {
    box-shadow: rgba(63, 0, 63, 1) 0em 0.1em 0.3em;
    display: inline-block;
    outline: 1px solid #ede;
    padding: 0.5em;
    margin-top: 1em;
    margin-bottom: 1em;
}

[about]:before {
    color: purple;
    content: "<" attr(about) ">";
}
[about][typeof]:before {
    content: "<" attr(about) "> a " attr(typeof);
}

/* TODO: order and test all combos of [property][rel][typeof][resource][href] */

[property][resource],
[property][href],
[rel] {
    outline: 1px solid #6da;
}

[property][typeof],
[property][typeof][resource],
[property][typeof][href],
[rel] {
    background-color: #eff;
    display: inline-block;
    margin-top: 0.7em;
}
[href]:before,
[href][typeof]:before,
[resource]:before,
[resource][typeof]:before {
    color: #067;
    font-size: 11px;
    font-weight: bold;
}
[href]:before {
    content: "<" attr(href) ">";
}
[href][typeof]:before {
    color: purple;
    content: "<" attr(href) "> a " attr(typeof);
}
[resource]:before {
    content: "<" attr(resource) ">";
}
[resource][typeof]:before {
    color: purple;
    content: "<" attr(resource) "> a " attr(typeof);
}

[rel]:before,
[property][href]:before,
[property][resource]:before {
    background-color: #eff;
    color: #067;
    font-size: 11px;
    font-weight: bold;
    padding: 0 2px;
    position: relative; top: -1em;
}
link:before {
    position: static !important;
}
[property][href]:before {
    content: attr(property) " <" attr(href) ">";
}
[property][resource]:before {
    content: attr(property) " <" attr(resource) ">";
}
[property][typeof]:before {
    content: attr(property) " [] a " attr(typeof);
}
[property][href][typeof]:before {
    content: attr(property) " <" attr(href) "> a " attr(typeof);
}
[property][resource][typeof]:before {
    content: attr(property) " <" attr(resource) "> a " attr(typeof);
}

[rel]:before {
    content: attr(rel);
}
[rel][href]:before {
    content: attr(rel) " <" attr(href) ">";
}
[rel][resource]:before {
    content: attr(rel) " <" attr(resource) ">";
}
[rel][href][typeof]:before {
    content: attr(rel) " <" attr(href) "> a " attr(typeof);
}
[rel][resource][typeof]:before {
    content: attr(rel) " <" attr(resource) "> a " attr(typeof);
}

